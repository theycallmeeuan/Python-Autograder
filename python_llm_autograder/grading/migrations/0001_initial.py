# Generated by Django 5.1.2 on 2024-11-11 21:44

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import grading.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Lecturer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="CourseGroup",
            fields=[
                (
                    "class_code",
                    models.CharField(max_length=20, primary_key=True, serialize=False),
                ),
                (
                    "lecturer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="course_groups",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Assignment",
            fields=[
                (
                    "assignment_code",
                    models.CharField(max_length=20, primary_key=True, serialize=False),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "course_group",
                    models.ManyToManyField(
                        related_name="assignments", to="grading.coursegroup"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Question",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("qn_code", models.CharField(max_length=10)),
                (
                    "grading_rubric",
                    models.FileField(
                        upload_to=grading.models.grading_rubric_directory_path
                    ),
                ),
                (
                    "question_file",
                    models.FileField(
                        default="",
                        upload_to=grading.models.question_file_directory_path,
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "assignment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="questions",
                        to="grading.assignment",
                    ),
                ),
                (
                    "lecturer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("qn_code", "assignment")},
            },
        ),
        migrations.CreateModel(
            name="ModelSolution",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "model_solution",
                    models.FileField(
                        upload_to=grading.models.model_solution_directory_path
                    ),
                ),
                (
                    "model_solution_all_solutions",
                    models.TextField(blank=True, null=True),
                ),
                (
                    "ast_python_code",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to=grading.models.ast_python_solution_directory_path,
                    ),
                ),
                (
                    "lecturer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="model_solutions",
                        to="grading.question",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SubmissionBatch",
            fields=[
                ("submission_id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "student_submissions_zip",
                    models.FileField(
                        upload_to=grading.models.submission_batch_directory_path
                    ),
                ),
                (
                    "uploaded_at",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("total_submissions", models.IntegerField(default=0)),
                ("processed_submissions", models.IntegerField(default=0)),
                (
                    "assignment",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="grading.assignment",
                    ),
                ),
                (
                    "course_group",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="grading.coursegroup",
                    ),
                ),
                (
                    "lecturer",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "question",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="grading.question",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="StudentSubmission",
            fields=[
                ("student_id", models.AutoField(primary_key=True, serialize=False)),
                ("submission_file", models.TextField(max_length=10000)),
                ("needs_manual_review", models.BooleanField(default=False)),
                ("actual_score", models.FloatField(blank=True, null=True)),
                ("test_cases_passed", models.IntegerField(default=0)),
                ("total_test_cases", models.IntegerField(default=0)),
                ("test_cases_feedback", models.JSONField(blank=True, null=True)),
                ("best_practices_score", models.FloatField(blank=True, null=True)),
                ("best_practices_feedback", models.JSONField(blank=True, null=True)),
                ("question_specific_score", models.FloatField(blank=True, null=True)),
                ("question_specific_feedback", models.JSONField(blank=True, null=True)),
                ("final_suggested_score", models.FloatField(blank=True, null=True)),
                ("checker_feedback", models.JSONField(blank=True, null=True)),
                (
                    "submission_batch",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="student_submissions",
                        to="grading.submissionbatch",
                    ),
                ),
            ],
        ),
    ]
